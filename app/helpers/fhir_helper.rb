# Helper module for all things Nightingale and FHIR.
module FhirHelper
  # Converts a Nightingale death record to a FHIR bundle.
  def self.to_fhir(death_record)
    # Create a new bundle
    fhir_record = FHIR::Bundle.new(
      "resourceType" => "Bundle",
      "id" => SecureRandom.uuid.to_s.strip,
      "type" => "document",
    )

    # TODO: This probably should probably actually correspond to the patient at some point
    resource_id = SecureRandom.uuid.to_s.strip

    # TODO: For the time being, each part of the patient entry is populated using the actual
    # flat structure path as defined in the default worklfow configuration. These should
    # be substituted at some point with their LOINC counterparts. This should be simple enough
    # using the LOINC helper functions defined on the DeathRecord model.

    # Create a new patient entry
    options = {}
    # Bundle and system identification
    options['id'] = resource_id
    options['identifier'] = [{'system': 'https://github.com/nightingaleproject/nightingale'}]
    # Decedent name
    name = {}
    name['given'] = [death_record.contents['decedentName.firstName']] if death_record.contents['decedentName.firstName']
    if death_record.contents['decedentName.middleName']
      name['given'] = [] unless name['given']
      name['given'] << death_record.contents['decedentName.middleName']
    end
    name['family'] = [death_record.contents['decedentName.lastName']] if death_record.contents['decedentName.lastName']
    name['use'] = 'official' if death_record.contents['decedentName.firstName'] || death_record.contents['decedentName.lastName'] || death_record.contents['decedentName.middleName']
    options['name'] = [name] unless name.empty?
    # Decedent gender (sex?)
    options['gender'] = death_record.contents['sex.sex'] if death_record.contents['sex.sex']
    # Decedent D.O.B.
    options['birthDate'] = death_record.contents['dateOfBirth.dateOfBirth'] if death_record.contents['dateOfBirth.dateOfBirth']
    options['_birthDate'] = {
      'extension': [
        {
          'url': 'http://hl7.org/fhir/StructureDefinition/patient-birthTime',
          'valueDateTime': DateTime.strptime(death_record.contents['dateOfBirth.dateOfBirth'], '%F').to_s
        }
      ]
    } if death_record.contents['dateOfBirth.dateOfBirth']
    # Decedent is deceased
    options['deceasedBoolean'] = true
    # Date and time of death
    options['deceasedDateTime'] = DateTime.strptime(death_record.contents['dateOfDeath.dateOfDeath'] + '-' + death_record.contents['timeOfDeath.timeOfDeath'], '%F-%H:%M').to_s if death_record.contents['dateOfDeath.dateOfDeath'] && death_record.contents['timeOfDeath.timeOfDeath']
    # Decedent's address
    options['address'] = FHIR::Address.new({city: death_record.contents['decedentAddress.city'], state: death_record.contents['decedentAddress.state'], country: 'United States'}).to_hash if death_record.contents['decedentAddress.city'] || death_record.contents['decedentAddress.state']
    # Decedent's marital status
    options['maritalStatus'] = MARITAL_STATUS[death_record.contents['maritalStatus.maritalStatus']]
    options['text'] = {'status': 'generated', 'div': "<div>Generated by <a href=\"https://github.com/nightingaleproject/nightingale\">Nightingale</a>. Version identifier: #{Nightingale::Application::VERSION}</div>"}
    options['extension'] = []
    # Decedent race
    options['extension'] << {
      'url' => 'http://hl7.org/fhir/us/core/StructureDefinition/us-core-race',
      'valueCodeableConcept' => {
        'text' => 'race',
        'coding' => [{
          'display' => death_record.contents['race.race.specify'].gsub(/[^0-9a-z]/i, ''),
          'code' => RACE_ETHNICITY_CODES[death_record.contents['race.race.specify'].gsub(/[^0-9a-z]/i, '')&.downcase&.split&.first&.to_sym],
          'system' => 'http://hl7.org/fhir/v3/Race'
        }]
      }
    } if death_record.contents['race.race.specify']
    # Decedent place of birth
    options['extension'] << {
      'url' => 'http://hl7.org/fhir/StructureDefinition/birthPlace',
      'valueAddress' => FHIR::Address.new({city: death_record.contents['placeOfBirth.city'], state: death_record.contents['placeOfBirth.state'], country: death_record.contents['placeOfBirth.country']}).to_hash
    } if death_record.contents['placeOfBirth.city'] || death_record.contents['placeOfBirth.state'] || death_record.contents['placeOfBirth.country']
    # Decedent's mother's maiden name
    options['extension'] << {
      'url' => 'http://hl7.org/fhir/StructureDefinition/patient-mothersMaidenName',
      'valueString' => death_record.contents['motherName.lastName']
    } if death_record.contents['motherName.lastName']
    # Decedent's birth sex
    options['extension'] << {
      'url' => 'http://hl7.org/fhir/us/core/StructureDefinition/us-core-birthsex',
      'valueCode' => death_record.contents['sex.sex']&.chars&.first
    } if death_record.contents['sex.sex']
    # No interpreter required (patient is deceased)
    options['extension'] << {
      'url' => 'http://hl7.org/fhir/StructureDefinition/patient-interpreterRequired',
      'valueBoolean' => false
    }
    patient_resource = FHIR::Patient.new(options)

    # Add info to record
    entry = FHIR::Bundle::Entry.new
    entry.fullUrl = "urn:uuid:#{resource_id}"
    entry.resource = patient_resource
    fhir_record.entry << entry
    fhir_record
  end

  # Converts a FHIR bundle (in json format) to the Nightingale death record flat
  # contents structure, which can be used to update or create a new record.
  def self.from_fhir(input_json)
    # Parse JSON into FHIR structure
    resource = FHIR::Json.from_json(input_json.to_s)

    # Validate FHIR
    errors = resource.validate
    unless errors.empty?
      raise 'Malformed FHIR input!'
    end

    # Contents
    contents = {}

    # Start by grabbing decedent and populate decedent specific information
    patient = resource.entry.first.resource
    # Populate general decedent information
    if patient
      name = patient&.name&.first
      contents['decedentName.firstName'] = name&.given&.first if name&.given&.first
      contents['decedentName.middleName'] = name&.given&.second if name&.given&.second
      contents['decedentName.lastName'] = name&.family&.first if name&.family&.first
      contents['sex.sex'] = patient.gender.humanize if patient.gender
      contents['dateOfBirth.dateOfBirth'] = patient.birthDate if patient.birthDate
      # Loop through any extensions
      patient.extension.each do |ext|
        # Grab decedent's race
        # TODO: This is obviously brittle, and we should support more than one race. For now, just grab the first.
        if ext.valueCodeableConcept && ext.valueCodeableConcept.text == 'race' && ext.valueCodeableConcept.coding && ext.valueCodeableConcept.coding.first && ext.valueCodeableConcept.coding.first.code
          contents['race.race.option'] = 'Known'
          contents['race.race.specify'] = [RACE_ETHNICITY_CODES.key(ext.valueCodeableConcept.coding.first.code).to_s.humanize].to_json.to_s
        end
        # Grab decedent's place of birth
        if ext.valueAddress
          contents['placeOfBirth.city'] = ext.valueAddress.city if ext.valueAddress.city
          contents['placeOfBirth.state'] = ext.valueAddress.state if ext.valueAddress.state
          contents['placeOfBirth.country'] = ext.valueAddress.country if ext.valueAddress.country
        end
        # Grab decedent's mother's maiden name
        if ext.url.include? 'mothersMaidenName'
          contents['motherName.lastName'] = ext.valueString if ext.valueString
        end
      end
    end

    # TODO: Cause of Death, etc.

    contents
  end

  MARITAL_STATUS = {
    'Married' => 'M',
    'Married but seperated' => 'M',
    'Widowed' => 'W',
    'Widowed (but not remarried)' => 'W',
    'Divorced (but not remarried)' => 'D',
    'Never married' => 'S',
    'Unknown' => 'UNK',
  }

  RACE_ETHNICITY_CODES = {
    :white => '2106-3',
    :hispanic => '2135-2',
    :black => '2054-5',
    :asian => '2028-9',
    :native => '1002-5',
    :other => '2131-1',
    :irish => '2113-9',
    :italian => '2114-7',
    :english => '2110-5',
    :french => '2111-3',
    :german => '2112-1',
    :polish => '2115-4',
    :portuguese => '2131-1',
    :american => '2131-1',
    :french_canadian => '2131-1',
    :scottish => '2116-2',
    :russian => '2131-1',
    :swedish => '2131-1',
    :greek => '2131-1',
    :puerto_rican => '2180-8',
    :mexican => '2148-5',
    :central_american => '2155-0',
    :south_american => '2165-9',
    :african => '2058-6',
    :dominican => '2069-3',
    :chinese => '2034-7',
    :west_indian => '2075-0',
    :asian_indian => '2029-7',
    :american_indian => '1004-1',
    :arab => '2129-5',
    :nonhispanic => '2186-5'
  }
end
